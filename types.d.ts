/* eslint-disable max-len */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/**
 *
 */
export interface paths {
  '/v1/api/users/edocprofile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * create eDoc profile
     * @description Creates a new eDoc profile and requires providing a complete profile definition. The profile includes profileId,  Isil code, project code and other relevant information.
     *
     */
    post: operations['createEDocProfile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/users/edocprofile/{profileId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve eDoc Profile
     * @description Retrieves the eDoc profile associated with the authenticated user. Users can only access their own profiles unless they have administrative privileges to view others.
     *
     */
    get: operations['getEDocProfile'];
    put?: never;
    post?: never;
    /**
     * delete eDoc profile
     * @description Deletes an existing eDoc profile identified by the profileId parameter. This operation should be restricted to administrators. It permanently removes the profile and its associated data from the system.
     *
     */
    delete: operations['deleteEDocProfile'];
    options?: never;
    head?: never;
    /**
     * update eDoc profile
     * @description Updates an existing eDoc profile for the authenticated user, including changing the activation status. This operation allows administrators to modify profile details and activate or deactivate their profile.
     *
     */
    patch: operations['updateEDocProfile'];
    trace?: never;
  };
  '/v1/api/users/edocprofiles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List/Search eDoc Profiles
     * @description Retrieves a list of eDoc profiles based on provided search criteria. This operation can be utilized by administrators. Supports filtering based on profile attributes like profileId, isil code, project code, full text deposit, 865m code, emails, allowed object types,  active status and wild cards.
     *
     */
    get: operations['listEDocProfiles'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/users/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register User
     * @description Registers a new user with the required properties. This endpoint is restricted to administrators to ensure controlled access to the eDoc. All fields in the User schema are required to create a user account, including a valid email address and a strong password.
     *
     */
    post: operations['registerUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/users/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login user
     * @description Authenticates a user and returns a session token. The login requires a valid email or username and password.
     *
     */
    post: operations['loginUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete user
     * @description Deletes an existing user.
     */
    delete: operations['deleteUser'];
    options?: never;
    head?: never;
    /**
     * Update user information
     * @description Updates the information of an existing user. This endpoint allows users to update their own profile information.
     */
    patch: operations['updateUser'];
    trace?: never;
  };
  '/v1/api/users/{username}/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Profile
     * @description Retrieves the profile information for a specified user. This endpoint is accessible to the user themselves or an administrator.
     *
     */
    get: operations['getUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Users
     * @description Retrieves a list of users based on provided search criteria. This operation is intended for administrators. Supports filtering based on user attributes like username, user type and email.
     *
     */
    get: operations['listUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/catalog/objects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * search for objects
     * @description Searches for objects in the database using various criteria such as ACNR, profile, modifier, sequence, object type, and file extension. Supports sorting, pagination, and filtering.
     *
     */
    get: operations['searchObjects'];
    put?: never;
    /**
     * create object metadata
     * @description Creates a new object metadata in the database with the specified properties. This operation requires all necessary object data, including ACNR, profile, sequence, object type, and file information.
     *
     */
    post: operations['createObject'];
    /**
     * Delete objects metadata by AC Number
     * @description Deletes all objects metadata associated with a given AC number from the database. Requires confirmation to proceed with deletion. This operation should be used with caution to prevent unintended data loss. This operation is restricted to administrators.
     *
     */
    delete: operations['deleteObjectMetadataByAcnr'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/catalog/{acnr}/objects/{acRecordObjectId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Object metadata
     * @description Retrieve  object metadata for a given AC number and AC Record Object ID. This operation allows users to access detailed information about a specific object, including its properties, file name, size, and creation date.
     *
     */
    get: operations['getObjectMetadata'];
    put?: never;
    post?: never;
    /**
     * delete object metadata
     * @description Permanently deletes an object metadata from the database. This operation requires confirmation via the 'confirm' query parameter to prevent accidental deletions. This operation is restricted to administrators.
     *
     */
    delete: operations['deleteObjectMetadata'];
    options?: never;
    head?: never;
    /**
     * Update Object metadata
     * @description Updates an existing object metadata in the database. This operation allows for modifying object properties and replacing it if necessary. This operation is restricted to administrators.
     *
     */
    patch: operations['updateObjectmetadata'];
    trace?: never;
  };
  '/v1/api/catalog/{acnr}/objects/{acRecordObjectId}/data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch Object Data
     * @description Retrieves the data for a specific object identified by ACNR and acRecordObjectId.
     */
    get: operations['fetchObjectData'];
    /**
     * Upload/Update Object data
     * @description Uploads or updates the file for an existing object.
     */
    put: operations['uploadObjectData'];
    post?: never;
    /**
     * Delete Object data
     * @description Deletes the data associated with a specific object.
     */
    delete: operations['deleteObjectData'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/catalog/direct-delivery': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Object based on AC number, object type, and sequence number
     * @description Retrieve objects for direct delivery to users based on AC number, object type, and sequence number. This endpoint facilitates the immediate access to specific objects, streamlining the delivery process for end-users.
     *
     */
    get: operations['directDelivery'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/catalog/{acnr}/objects/{profile}/{modifier}/{sequence}/full-text-cache': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Access to full text cache
     * @description Retrieves the full text cache for the specified object. This operation checks for the existence of the full text cache and returns it if available.
     *
     */
    get: operations['getFullTextCache'];
    put?: never;
    /**
     * create full text cache
     * @description Creates a new full text cache for the specified object. This operation requires the necessary permissions and the provision of all required data related to the object.
     *
     */
    post: operations['createFullTextCache'];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Rebuild full text cache
     * @description Rebuilds or updates the full text cache for the specified object. This is necessary when the object's content has changed, ensuring the cache reflects the most current data.
     *
     */
    patch: operations['rebuildFullTextCache'];
    trace?: never;
  };
  '/v1/api/catalog/pnx-fulltext': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Extend PNX Record with Full Text
     * @description Retrieves full text data for a given set of criteria and extends the corresponding PNX record. This endpoint is designed for integrating full text data into PNX records.
     *
     */
    post: operations['extendPNXWithFullText'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/reports/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate user report
     * @description Generates a report for a specific user, detailing their activities and interactions with the eDoc.
     */
    get: operations['generateUserReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/statistics/contributions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of profile contributions
     * @description Retrieve statistics on the types of content contributed by profiles, with options to filter by time range and content types.
     *
     */
    get: operations['getContributionsStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/api/statistics/web-access': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of web accesses based on profile
     * @description Retrieve statistics of web accesses to objects in the eDoc, filtered by the profile.
     */
    get: operations['getWebAccessesStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
/**
 *
 */
export type webhooks = Record<string, never>;
/**
 *
 */
export interface components {
  schemas: {
    /**
     * @description Data to create an eDoc profile
     * @example {
     *       "profileId": "UBI-DIVERS",
     *       "isil": "AT-UBI",
     *       "projectCode": "OBV-EDOC",
     *       "fullTextDeposit": false,
     *       "865mCode": "AT-UBI",
     *       "contactEmails": [
     *         "contactEmail"
     *       ],
     *       "profileAllowedTypes": [
     *         "Inhaltsverzeichnis",
     *         "Volltext"
     *       ],
     *       "isActive": true
     *     }
     */
    eDocProfileCreation: {
      /**
       * @description Unique identifier for the eDocProfile
       * @example UBI-DIVERS
       */
      profileId: string;
      /**
       * @description isil code for institution
       * @example AT-UBI
       */
      isil: string;
      /**
       * @description the project code
       * @default OBV-EDOC
       * @example OBV-EDOC
       */
      projectCode: string;
      /**
       * @description Indicates whether full text deposit is allowed
       * @default false
       * @example false
       */
      fullTextDeposit: boolean;
      /**
       * @description the 865 subfield m code of the user
       * @default AT-OBV
       * @example AT-OBV
       */
      '865mCode': string;
      /** @description One or more contact email addresses */
      contactEmails: string[];
      /** @description Permitted object types for the institution */
      profileAllowedTypes: (
        | 'Inhaltsverzeichnis'
        | 'Klappentext'
        | 'Volltext'
        | 'Umschlagbild'
        | 'Bild'
      )[];
      /**
       * @description Indicates whether the profile is active
       * @default true
       */
      isActive: boolean;
    };
    /**
     * @description An eDoc profile for an Institution
     * @example {
     *       "profileId": "UBI-DIVERS",
     *       "isil": "AT-UBI",
     *       "projectCode": "OBV-EDOC",
     *       "fullTextDeposit": false,
     *       "865mCode": "AT-UBI",
     *       "contactEmails": [
     *         "contactEmail"
     *       ],
     *       "profileAllowedTypes": [
     *         "Inhaltsverzeichnis",
     *         "Volltext"
     *       ],
     *       "isActive": true
     *     }
     */
    eDocProfile: {
      /**
       * @description Unique identifier for the eDocProfile (e.g., UBI-DIVERS)
       * @example UBI-DIVERS
       */
      profileId?: string;
      /**
       * @description isil identifier for library
       * @example AT-UBI
       */
      isil?: string;
      /**
       * @description the project code (e.g., OBV-EDOC)
       * @example OBV-EDOC
       */
      projectCode?: string;
      /**
       * @description Indicates whether full text deposit is allowed (e.g., false)
       * @example false
       */
      fullTextDeposit?: boolean;
      /**
       * @description the 865 subfield m code of the user (e.g., AT-OBV)
       * @example AT-OBV
       */
      '865mCode'?: string;
      /** @description One or more contact email addresses for the institution */
      contactEmails?: string[];
      /** @description Permitted object types for the institution (e.g., ["Inhaltsverzeichnis", "Volltext"]) */
      profileAllowedTypes?: (
        | 'Inhaltsverzeichnis'
        | 'Klappentext'
        | 'Volltext'
        | 'Umschlagbild'
        | 'Bild'
      )[];
      /**
       * @description Indicates whether the profile is active (e.g., true)
       * @example true
       */
      isActive?: boolean;
    };
    /**
     * @description User details
     * @example {
     *       "firstName": "Max",
     *       "lastName": "Mustermann",
     *       "username": "MaxMustermann",
     *       "userType": "admin",
     *       "email": "user@user.com",
     *       "password": "password",
     *       "eDocProfiles": [
     *         "UBI-DIVERS",
     *         "UBI-EDOC"
     *       ],
     *       "isActive": true
     *     }
     */
    user: {
      /**
       * @description The first name of the user
       * @example Max
       */
      firstName: string;
      /**
       * @description The last name of the user
       * @example Mustermann
       */
      lastName: string;
      /**
       * @description The username of the user
       * @example MaxMustermann
       */
      username: string;
      /**
       * @description The type of the user (admin, user, etc.)
       * @example admin
       */
      userType: string;
      /**
       * @description The email of the user
       * @example user@user.com
       */
      email: string;
      /**
       * @description The password of the user (hashed and salted)
       * @example password
       */
      password: string;
      /**
       * @description Array of IDs for each eDocProfile associated with the user
       * @example [
       *       "UBI-DIVERS",
       *       "UBI-EDOC"
       *     ]
       */
      eDocProfiles: string[];
      /**
       * @description Indicates whether the user is active
       * @default true
       */
      isActive: boolean;
    };
    /**
     * @description User details for response
     * @example {
     *       "firstName": "Max",
     *       "lastName": "Mustermann",
     *       "username": "MaxMustermann",
     *       "userType": "admin",
     *       "email": "user@user.com",
     *       "eDocProfiles": [
     *         "UBI-DIVERS",
     *         "UBI-EDOC"
     *       ],
     *       "isActive": true
     *     }
     */
    userResponse: {
      /**
       * @description The first name of the user (e.g., Max)
       * @example Max
       */
      firstName?: string;
      /**
       * @description The last name of the user (e.g., Mustermann)
       * @example Mustermann
       */
      lastName?: string;
      /**
       * @description The username of the user (e.g., MaxMustermann)
       * @example MaxMustermann
       */
      username?: string;
      /**
       * @description The type of the user (admin or user)
       * @example admin
       */
      userType?: string;
      /**
       * @description The email of the user (e.g., user@user.com)
       * @example user@user.com
       */
      email?: string;
      /** @example [
       *       "UBI-DIVERS",
       *       "UBI-EDOC"
       *     ] */
      eDocProfiles?: string[];
      /**
       * @description Indicates whether the user is active (e.g., true)
       * @default true
       */
      isActive: boolean;
    };
    /**
     * @description The user properties required for login (POST)
     * @example {
     *       "loginIdentifier": "user@user.com",
     *       "password": "password"
     *     }
     */
    userLogin: {
      /**
       * @description The login identifier (email or username)
       * @example user@user.com
       */
      loginIdentifier: string;
      /**
       * @description The password of the user
       * @example password
       */
      password: string;
    };
    /**
     * @description The object properties required for creation
     * @example {
     *       "acnr": "AC00016679",
     *       "profile": "UBI-EDOC",
     *       "sequence": "01",
     *       "objectType": "Inhaltsverzeichnis",
     *       "belongsToAggregate": false,
     *       "label": "Bd. 127.2007",
     *       "fileUrl": "https://www.tuwien.ac.at/file.pdf"
     *     }
     */
    objectCreation: {
      /**
       * @description the ACNR of the object
       * @example AC00016679
       */
      acnr: string;
      /**
       * @description The profile of the object creator (e.g., UBI-DIVERS)
       * @example UBI-DIVERS
       */
      profile: string;
      /**
       * @description the sequence of the object for the same object type
       * @example 01
       */
      sequence?: string;
      /**
       * @description the type of the object
       * @example Inhaltsverzeichnis
       * @enum {string}
       */
      objectType:
        | 'Inhaltsverzeichnis'
        | 'Klappentext'
        | 'Umschlagbild'
        | 'Bild'
        | 'Volltext (an der OBVSG gehostet)'
        | 'Aggregat-Satz Inhaltsverzeichnisse'
        | 'Aggregat-Satz Volltexte';
      /**
       * @description Flag indicating whether the object should be displayed as an aggregate
       * @example false
       */
      belongsToAggregate: boolean;
      /**
       * @description Label for the object, structured as 'Type, Month/Year, Issue/Volume'. Adjust according to the object's metadata.
       * @example Bd. 127.2007
       */
      label: string;
      /**
       * Format: uri
       * @description URL of the file for remote indexing.
       * @example https://www.tuwien.ac.at/file.pdf
       */
      fileUrl?: string;
    };
    /**
     * @description object data
     * @example {
     *       "id": 1,
     *       "acnr": "AC00016679",
     *       "profile": "UBI-EDOC",
     *       "sequence": "01",
     *       "objectType": "Inhaltsverzeichnis",
     *       "mimeType": "text/plain",
     *       "belongsToAggregate": false,
     *       "label": "Bd. 127.2007",
     *       "fileName": "test.txt",
     *       "size": 1024,
     *       "createDate": "2022-01-01T00:00:00Z",
     *       "updateDate": "2022-01-01T00:00:00Z",
     *       "links": [
     *         {
     *           "rel": "self",
     *           "href": "/v1/api/catalog/AC00016679/objects/iv-01"
     *         },
     *         {
     *           "rel": "delete",
     *           "href": "/v1/api/catalog/AC00016679/objects/iv-01"
     *         },
     *         {
     *           "rel": "data",
     *           "href": "/v1/api/catalog/AC00016679/objects/iv-01/data"
     *         }
     *       ]
     *     }
     */
    object: {
      /**
       * @description The ID of the object
       * @example 1
       */
      id?: number;
      /**
       * @description the acnr of the object
       * @example AC00016679
       */
      acnr?: string;
      /**
       * @description The profile of the object creator
       * @example UBI-DIVERS
       */
      profile?: string;
      /**
       * @description the sequence of the object
       * @example 01
       */
      sequence?: string;
      /**
       * @description the type of the object (Inhaltsverzeichnis, Abstract, Auszug, Zusammenfassung, Rezension, Klappentext, Umschlagbild, Titelseite, Volltext, Bild, ...)
       * @example Inhaltsverzeichnis
       */
      objectType?: string;
      /**
       * @description The mime type of the object
       * @example application/pdf
       */
      mimeType?: string;
      /**
       * @description Flag indicating whether the object should be displayed as an aggregate (true or false)
       * @example false
       */
      belongsToAggregate?: boolean;
      /**
       * @description Label for the object, structured as 'Type, Month/Year, Issue/Volume' or similar.
       * @example 26,2.2012
       */
      label?: string;
      /**
       * @description Name of the file saved on the server
       * @example document.pdf
       */
      fileName?: string;
      /**
       * @description The size of the object
       * @example 1024
       */
      size?: number;
      /**
       * Format: date-time
       * @description The creation date of the object
       * @example 2020-01-01T00:00:00Z
       */
      createDate?: string;
      /**
       * Format: date-time
       * @description The last update date of the object
       * @example 2020-01-01T00:00:00Z
       */
      updateDate?: string;
      /**
       * Format: uri
       * @description URL of the file for remote indexing (only for objects with remote indexing enabled)
       * @example https://www.tuwien.ac.at/file.pdf
       */
      fileUrl?: string;
      /**
       * @description HATEOAS links to object operations
       * @example [
       *       {
       *         "rel": "self",
       *         "href": "/v1/api/catalog/{acnr}/objects/{acRecordObjectId}"
       *       },
       *       {
       *         "rel": "delete",
       *         "href": "/v1/api/catalog/{acnr}/objects/{acRecordObjectId}"
       *       },
       *       {
       *         "rel": "data",
       *         "href": "/v1/api/catalog/{acnr}/objects/{acRecordObjectId}/data"
       *       }
       *     ]
       */
      links?: {
        /**
         * @description The relation type of the link (self, delete, data)
         * @example self
         * @enum {string}
         */
        rel?: 'self' | 'delete' | 'data';
        /**
         * @description The HTTP method of the link
         * @example GET
         */
        method?: string;
        /**
         * @description The URL to perform the operation
         * @example /v1/api/catalog/{acnr}/objects/{acRecordObjectId}
         */
        href?: string;
      }[];
    };
    /** @description object data for update */
    objectUpdate: {
      /**
       * @description the sequence of the object (01, 02, 03, ...)
       * @example 01
       */
      sequence?: string;
      /**
       * @description the type of the object (Inhaltsverzeichnis, Klappentext, Umschlagbild, Volltext, Bild, ...)
       * @example Inhaltsverzeichnis
       */
      objectType?: string;
      /**
       * @description Flag indicating if the object belongs to an aggregate
       * @example false
       */
      belongsToAggregate?: boolean;
      /**
       * @description Label for the object, structured as 'Type, Month/Year, Issue/Volume'.
       * @example 26,2.2012
       */
      label?: string;
      /**
       * Format: uri
       * @description The URL of the file for remote indexing
       * @example https://www.tuwien.ac.at/file.pdf
       */
      fileUrl?: string;
    };
    /**
     * Format: binary
     * @description The data for the object.
     * @example data
     */
    objectData: string;
    /** @description Cache data associated with an eDoc full text object. */
    fullTextCache: {
      /** @description The ID of the full text object */
      id: number;
      /**
       * Format: date-time
       * @description The timestamp indicating when the cache was created / last updated
       */
      timestamp: string;
      /** @description The cached data of the full text. */
      data: string;
    };
    /** @description Extended PNX data associated with an eDoc full text/TOC object. */
    ExtendedPNX: {
      /** @description The AC number of the object */
      acnr: string;
      /** @description The type of the object (TOC, fulltext) */
      type: string;
      /** @description Link to the updated bib record in Alma, which includes the eDOC link (in 856 field). */
      bibRecordLink: string;
      /** @description Status of the full text cache (created, updated, not found) */
      fullTextCacheStatus: string;
      /** @description Status of the primo integration (awaiting processing in the next Piperun or has been successfully integrated) */
      primoIntegrationStatus?: string;
      /** @description XREF -  the link between the Primo dataset and the AC Number. Contains detailing the linkage between the Primo dataset and the AC Number, along with the object type. */
      primoXref?: string;
      /**
       * Format: date-time
       * @description The timestamp of the last update or processing time of the object.
       */
      lastUpdate?: string;
    };
    /** @description a report */
    report: {
      /** @description The report */
      report?: {
        /** @description The ID of the user */
        userId?: number;
        /** @description The activities of the user */
        activities?: {
          /** @description The type of the activity */
          activityType?: string;
          /**
           * Format: date-time
           * @description The timestamp of the activity
           */
          timestamp?: string;
          /** @description The details of the activity */
          details?: string;
        }[];
      };
    };
    /** @description Statistics about contributions made by or available to an institution. */
    contributionStats: {
      /** @description Identifier for the institution these statistics relate to. */
      profileId: string;
      /** @description Total number of contributions made by the institution. */
      totalContributions: number;
      /** @description Statistics broken down by object types. */
      objectTypeStats: components['schemas']['objectTypeStats'][];
      /** @description Statistics on how contributions are being used by other institutions. */
      usageStats: components['schemas']['usageStats'][];
      /** @description Number of contributions made in the past month. */
      recentContributions: number;
    };
    /** @description Statistics about object types. */
    objectTypeStats: {
      /** @description Object type. */
      objectType?: string;
      /** @description Number of objects of the type. */
      count?: number;
    };
    /** @description Statistics on how contributions are being used by other institutions (modification, read, download, etc). */
    usageStats: {
      /** @description Usage type (modification, read, download, etc). */
      usageType?: string;
      /** @description count of usage */
      count?: number;
    };
    /** @description Statistics about web accesses */
    webAccessesStats: {
      /** @description Identifier for the institution these statistics relate to (e.g., UBI-DIVERS) */
      profileId?: string;
      /** @description Total number of web accesses. */
      totalWebAccesses?: number;
      /** @description Number of unique visitors. */
      uniqueVisitors?: number;
      /** @description Statistics broken down by object types (see objectTypeStats). */
      accessesByObjectType?: components['schemas']['objectTypeStats'][];
      /** @description Number of accesses over a specified time period (see accessOverTime). */
      accessesOverTime?: components['schemas']['accessOverTime'][];
    };
    /** @description Number of accesses over a specified time period. */
    accessOverTime: {
      /**
       * Format: date
       * @description Time period for the access count.
       */
      period?: string;
      /** @description The number of accesses during the period. */
      count?: number;
    };
    /** @description Error response object */
    errorResponse: {
      /** @example {
       *       "code": 400,
       *       "message": "Some required fields are missing."
       *     } */
      error?: {
        /**
         * @description The error code
         * @example 400
         */
        code: number;
        /**
         * @description A human-readable error message
         * @example Some required fields are missing.
         */
        message: string;
      };
    };
  };
  responses: {
    /** @description Invalid search parameters, e.g. 400 */
    invalidSearchParameters: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description Internal server error response, e.g. 500 */
    internalServerError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description Forbidden - Insufficient privileges to perform the operation, e.g. 403 */
    insufficientPrivileges: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description User not found - the specified user does not exist, e.g. 404 */
    UserNotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description Profile not found - the specified eDoc profile does not exist, e.g. 404 */
    eDocProfileNotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description Object metadata not found */
    objectMetadataNotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
    /** @description Object not found */
    objectNotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['errorResponse'];
      };
    };
  };
  parameters: {
    /** @description the id of the eDocprofile */
    profileId: string;
    /** @description the username of the user */
    username: string;
    /** @description the userId of the user */
    userIdQuery: number;
    /** @description the acnr of the object as input parameter */
    acnr: string;
    /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
    acRecordObjectId: string;
    /** @description creator of the object */
    profile: string;
    /** @description the modifier of the object */
    modifier: string;
    /** @description the sequence of the object as input parameter */
    sequence: string;
    /** @description confirm the deletion */
    confirm: boolean;
    /** @description the acnr of the object as query parameter */
    acnrQuery: string;
    /** @description the time range of the report */
    timeRangeQuery: string;
    /** @description the activity type of the report */
    activityTypeQuery: string;
    /** @description the query to search for object in the database */
    searchObjectQuery: {
      /**
       * @description the acnr of the object as object query parameter
       * @example AC00016679
       */
      acnr?: string;
      /**
       * @description the isil of the object creator
       * @example AT-UBI
       */
      isil?: string;
      /**
       * @description the creator of the object
       * @example tuw
       */
      profile?: string;
      /**
       * @description the sequence of the object as object query parameter
       * @example 01
       */
      sequence?: string;
      /**
       * @description the type of the object (Inhaltsverzeichnis,Volltext, Bild, ...) as object query parameter
       * @example Inhaltsverzeichnis
       */
      objectType?: string;
      /**
       * @description the file extension of the object
       * @example pdf
       */
      fileExtension?: string;
      /**
       * @description Flag indicating if the object belongs to an aggregate as object query parameter
       * @example false
       */
      belongsToAggregate?: boolean;
      /**
       * @description the label of the object
       * @example Inhaltsverzeichnis für 18.2001
       */
      label?: string;
      /**
       * @description the time range of the object
       * @example 2022-01-01T00:00:00Z/2022-01-01T23:59:59Z
       */
      dateRange?: string;
      /**
       * @description the file name of the object
       * @example AC00016341-1001.txt
       */
      fileName?: string;
      /**
       * @description The field to sort the objects by.
       * @example acnr
       * @enum {string}
       */
      sortBy?: 'acnr' | 'isil' | 'objectType' | 'profile';
      /**
       * @description The sort order for the objects.
       * @example asc
       * @enum {string}
       */
      sortOrder?: 'asc' | 'desc';
      /**
       * @description the maximum number of objects to return
       * @example 10
       */
      limit?: number;
      /**
       * @description the page number
       * @example 1
       */
      page?: number;
    };
    /** @description the query to search for eDoc profile in the database */
    searchProfileQuery: {
      /**
       * @description the profileId of the eDoc profile
       * @example UBI-EDOC
       */
      profileId?: string;
      /**
       * @description the isil of the eDoc profile
       * @example AT-UBI
       */
      isil?: string;
      /**
       * @description the project code of the eDoc profile
       * @example OBV-EDOC
       */
      projectCode?: string;
      /**
       * @description indicates whether full text deposit is allowed for this profile
       * @example false
       */
      fullTextDeposit?: boolean;
      /**
       * @description the 865 subfield m code for this profile
       * @example AT-OBV
       */
      '865mCode'?: string;
      /** @description one or more contact emails */
      contactEmails?: string[];
      /**
       * @description permitted object types
       * @example [
       *       "Inhaltsverzeichnis",
       *       "Volltext",
       *       "Bild"
       *     ]
       */
      profileAllowedTypes?: string[];
      /**
       * @description indicates whether the eDoc profile is active
       * @example true
       */
      isActive?: boolean;
    };
    /** @description the query to search for user in the database */
    searchUserQuery: {
      /**
       * @description the first name of the user
       * @example Max
       */
      firstName?: string;
      /**
       * @description the last name of the user
       * @example Mustermann
       */
      lastName?: string;
      /**
       * @description the username of the user as query parameter
       * @example MaxMustermann
       */
      username?: string;
      /**
       * @description the type of the user
       * @example admin
       */
      userType?: string;
      /**
       * @description the email of the user
       * @example user@user.com
       */
      email?: string;
      /**
       * @description the eDoc profiles of the user
       * @example [
       *       "UBI-DIVERS",
       *       "UBI-EDOC"
       *     ]
       */
      eDocProfiles?: string[];
      /**
       * @description indicates whether the user is active
       * @example true
       */
      isActive?: boolean;
    };
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
/**
 *
 */
export type $defs = Record<string, never>;
/**
 *
 */
export interface operations {
  createEDocProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The eDoc profile data to create including project code, and other relevant information. */
    requestBody: {
      content: {
        'application/json': components['schemas']['eDocProfileCreation'];
      };
    };
    responses: {
      /** @description eDoc profile successfully created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['eDocProfile'];
        };
      };
      /** @description Bad request - missing fields or invalid information for eDoc profile creation. See error response for specifics. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      500: components['responses']['internalServerError'];
    };
  };
  getEDocProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the id of the eDocprofile */
        profileId: components['parameters']['profileId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description eDoc profile retrieval successful. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['eDocProfile'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['eDocProfileNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  deleteEDocProfile: {
    parameters: {
      query: {
        /** @description confirm the deletion */
        confirm: components['parameters']['confirm'];
      };
      header?: never;
      path: {
        /** @description the id of the eDocprofile */
        profileId: components['parameters']['profileId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description eDoc profile successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields in the profile deletion. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['eDocProfileNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  updateEDocProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the id of the eDocprofile */
        profileId: components['parameters']['profileId'];
      };
      cookie?: never;
    };
    /** @description The updated eDoc profile data. Only fields that need to be updated should be included. */
    requestBody: {
      content: {
        'application/json': components['schemas']['eDocProfile'];
      };
    };
    responses: {
      /** @description eDoc profile successfully updated. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['eDocProfile'];
        };
      };
      /** @description Bad request - missing or invalid fields in the profile update. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['eDocProfileNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  listEDocProfiles: {
    parameters: {
      query?: {
        /** @description the query to search for eDoc profile in the database */
        query?: components['parameters']['searchProfileQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of eDoc profiles matching the search criteria. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['eDocProfile'][];
        };
      };
      400: components['responses']['invalidSearchParameters'];
      403: components['responses']['insufficientPrivileges'];
      500: components['responses']['internalServerError'];
    };
  };
  registerUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The user properties required for registration. */
    requestBody: {
      content: {
        'application/json': components['schemas']['user'];
      };
    };
    responses: {
      /** @description User successfully registered. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      500: components['responses']['internalServerError'];
    };
  };
  loginUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The user properties required for login */
    requestBody: {
      content: {
        'application/json': components['schemas']['userLogin'];
      };
    };
    responses: {
      /** @description User successfully logged in. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  deleteUser: {
    parameters: {
      query: {
        /** @description confirm the deletion */
        confirm: components['parameters']['confirm'];
      };
      header?: never;
      path: {
        /** @description the username of the user */
        username: components['parameters']['username'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request, missing or invalid fields or confirmation in user deletion. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['UserNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the username of the user */
        username: components['parameters']['username'];
      };
      cookie?: never;
    };
    /** @description The properties of the user to update. Include only fields that need to be updated */
    requestBody: {
      content: {
        'application/json': components['schemas']['userResponse'];
      };
    };
    responses: {
      /** @description User information successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request, missing or invalid fields */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      404: components['responses']['UserNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the username of the user */
        username: components['parameters']['username'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User profile retrieved successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['userResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  listUsers: {
    parameters: {
      query?: {
        /** @description the query to search for user in the database */
        query?: components['parameters']['searchUserQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of users matching the search criteria. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['userResponse'][];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  searchObjects: {
    parameters: {
      query?: {
        /** @description the query to search for object in the database */
        query?: components['parameters']['searchObjectQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['object'][];
        };
      };
      400: components['responses']['invalidSearchParameters'];
      404: components['responses']['objectNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  createObject: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The object data to create, including the file URL. */
    requestBody: {
      content: {
        'application/json': components['schemas']['objectCreation'];
      };
    };
    responses: {
      /** @description Object created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields or invalid file format. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      500: components['responses']['internalServerError'];
    };
  };
  deleteObjectMetadataByAcnr: {
    parameters: {
      query: {
        /** @description the acnr of the object as query parameter */
        acnr?: components['parameters']['acnrQuery'];
        /** @description confirm the deletion */
        confirm: components['parameters']['confirm'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Objects deleted successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['object'];
        };
      };
      /** @description Bad request - invalid ACNR or missing confirmation. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      /** @description Object not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  getObjectMetadata: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Object metadata retrieved successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['object'];
        };
      };
      /** @description Bad request - missing or invalid ACNR or AC Record Object ID. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      404: components['responses']['objectMetadataNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  deleteObjectMetadata: {
    parameters: {
      query: {
        /** @description confirm the deletion */
        confirm: components['parameters']['confirm'];
      };
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Object metadata deleted successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields in the object metadata deletion. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['objectMetadataNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  updateObjectmetadata: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    /** @description All object properties to update */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['objectUpdate'];
      };
    };
    responses: {
      /** @description Object metadata updated successfully. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields in the object metadata update. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['objectMetadataNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  fetchObjectData: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The data of the object is retrieved successfully. */
      200: {
        headers: {
          'Content-Type'?: string;
          [name: string]: unknown;
        };
        content: {
          'application/octet-stream': components['schemas']['objectData'];
        };
      };
      /** @description Bad request - missing or invalid fields in the object data retrieval. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      404: components['responses']['objectNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  uploadObjectData: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    /** @description The new data for the object./The file data to upload. */
    requestBody: {
      content: {
        /** @example base64 encoded data */
        'application/octet-stream': components['schemas']['objectData'];
      };
    };
    responses: {
      /** @description File uploaded successfully. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields in the object data update. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['objectNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  deleteObjectData: {
    parameters: {
      query: {
        /** @description confirm the deletion */
        confirm: components['parameters']['confirm'];
      };
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description the acRecordObjectId of the object. First part is mnemonic or numeric prefix for the object type, second part is a sequence number */
        acRecordObjectId: components['parameters']['acRecordObjectId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The data of the object is deleted successfully. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields in the object data deletion. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      404: components['responses']['objectNotFound'];
      500: components['responses']['internalServerError'];
    };
  };
  directDelivery: {
    parameters: {
      query: {
        /** @description AC Number identifying the object. */
        acnr: string;
        /** @description Type of the object to be delivered. */
        objectType: string;
        /** @description Sequence number of the object, determining its order among multiple objects associated with the same AC number. */
        sequence: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Object retrieved successfully for direct delivery. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['object'];
        };
      };
      /** @description Object does not exist. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  getFullTextCache: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description creator of the object */
        profile: components['parameters']['profile'];
        /** @description the modifier of the object */
        modifier: components['parameters']['modifier'];
        /** @description the sequence of the object as input parameter */
        sequence: components['parameters']['sequence'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Full text cache retrieved successfully. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['fullTextCache'];
        };
      };
      /** @description Cache or object not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  createFullTextCache: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description creator of the object */
        profile: components['parameters']['profile'];
        /** @description the sequence of the object as input parameter */
        sequence: components['parameters']['sequence'];
        /** @description the modifier of the object */
        modifier: components['parameters']['modifier'];
      };
      cookie?: never;
    };
    /** @description Data required to create the full text cache. */
    requestBody: {
      content: {
        'application/json': components['schemas']['fullTextCache'];
      };
    };
    responses: {
      /** @description Cache created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields for creating the full text cache. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      500: components['responses']['internalServerError'];
    };
  };
  rebuildFullTextCache: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the acnr of the object as input parameter */
        acnr: components['parameters']['acnr'];
        /** @description creator of the object */
        profile: components['parameters']['profile'];
        /** @description the modifier of the object */
        modifier: components['parameters']['modifier'];
        /** @description the sequence of the object as input parameter */
        sequence: components['parameters']['sequence'];
      };
      cookie?: never;
    };
    /** @description Data required to rebuild or update the full text cache. */
    requestBody: {
      content: {
        'application/json': components['schemas']['fullTextCache'];
      };
    };
    responses: {
      /** @description Full text cache rebuilt or updated successfully. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request - missing or invalid fields for rebuilding the full text cache. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      403: components['responses']['insufficientPrivileges'];
      /** @description Cache or object not found or the object does not exist. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['errorResponse'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  extendPNXWithFullText: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Criteria to retrieve the full text data for extending PNX records. */
    requestBody: {
      content: {
        'application/json': {
          /** @description AC Number identifying the object for which full text is retrieved. */
          acnr: string;
          /**
           * @description Type of object , specifically 'full text'.
           * @enum {string}
           */
          objectType: 'full text';
          /** @description Sequence number, for identifying the object. */
          sequence?: string;
        };
      };
    };
    responses: {
      /** @description PNX record successfully extended with full text data. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ExtendedPNX'];
        };
      };
      /** @description Bad request - missing or invalid fields in the request. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Full text data not found for the specified criteria. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      500: components['responses']['internalServerError'];
    };
  };
  generateUserReport: {
    parameters: {
      query: {
        /** @description the userId of the user */
        userIdQuery: components['parameters']['userIdQuery'];
        /** @description the time range of the report */
        timeRange?: components['parameters']['timeRangeQuery'];
        /** @description the activity type of the report */
        activityType?: components['parameters']['activityTypeQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Report successfully generated. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['report'];
        };
      };
      /** @description Bad request - Invalid parameters. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: components['responses']['insufficientPrivileges'];
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      500: components['responses']['internalServerError'];
    };
  };
  getContributionsStats: {
    parameters: {
      query: {
        /** @description ID of the profile */
        profileId: string;
        /** @description Time range for the statistics (e.g., 'total' or 'lastMonth') */
        timeRange: 'total' | 'lastMonth';
        /** @description Specific object type to filter the statistics */
        objectType?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description retrieved statistics of profile contributions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['contributionStats'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  getWebAccessesStats: {
    parameters: {
      query: {
        /** @description The profile to filter the statistics by. */
        profileId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description retrieved statistics of web accesses based on profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['webAccessesStats'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
}
